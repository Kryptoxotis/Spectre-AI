/**n * Spectre AI Assistant - Main Entry Pointn * Initializes the system and starts the web servern */nnimport express from 'express';nimport cors from 'cors';nimport helmet from 'helmet';nimport { config } from './core/config';nimport { spectreLogger } from './core/logger';nimport { orchestrator } from './core/orchestrator';nimport { agents } from './agents';nn/**n * Main application classn */nclass SpectreApp {n  private app: express.Application;n  private server: any;nn  constructor() {n    this.app = express();n    this.setupMiddleware();n    this.setupRoutes();n  }nn  /**n   * Setup middlewaren   */n  private setupMiddleware(): void {n    // Security middlewaren    this.app.use(helmet({n      contentSecurityPolicy: {n        directives: {n          defaultSrc: ["'self'"],n          styleSrc: ["'self'", "'unsafe-inline'"],n          scriptSrc: ["'self'"],n          imgSrc: ["'self'", "data:", "https:"],n        },n      },n    }));nn    // CORS configurationn    this.app.use(cors({n      origin: config.getValue('corsOrigin'),n      credentials: true,n      methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],n      allowedHeaders: ['Content-Type', 'Authorization'],n    }));nn    // Body parsing middlewaren    this.app.use(express.json({ limit: '10mb' }));n    this.app.use(express.urlencoded({ extended: true, limit: '10mb' }));nn    // Request loggingn    this.app.use((req, _res, next) => {n      spectreLogger.success('web', 'request_received', undefined, undefined,n        `${req.method} ${req.path}`, 'processing_request',n        { method: req.method, path: req.path, ip: req.ip, userAgent: req.get('User-Agent') });n      next();n    });n  }nn  /**n   * Setup routesn   */n  private setupRoutes(): void {n    // Health check endpointn    this.app.get('/health', (_req, res) => {n      const health = orchestrator.getSystemHealth();n      res.json({n        status: 'healthy',n        timestamp: new Date().toISOString(),n        uptime: process.uptime(),n        version: '1.0.0',n        ...health,n      });n    });nn    // API routesn    this.app.use('/api/v1', this.setupApiRoutes());n    n    // Web interface routesn    this.app.use('/api/v1/chat', this.setupWebRoutes().chat);n    this.app.use('/api/v1/logs', this.setupWebRoutes().logs);n    this.app.use('/api/v1/dashboard', this.setupWebRoutes().dashboard);nn    // Static files (for web UI)n    this.app.use('/static', express.static('src/web/ui/static'));nn    // Default routen    this.app.get('/', (_req, res) => {n      res.json({n        name: 'Spectre AI Assistant',n        version: '1.0.0',n        description: 'Your Virtual CTO, Developer, and Planner',n        endpoints: {n          health: '/health',n          api: '/api/v1',n          docs: '/api/v1/docs',n        },n      });n    });nn    // 404 handlern    this.app.use('*', (req, res) => {n      res.status(404).json({n        error: 'Not Found',n        message: `Route ${req.method} ${req.originalUrl} not found`,n        timestamp: new Date().toISOString(),n      });n    });nn    // Error handlern    this.app.use((error: any, req: express.Request, res: express.Response, _next: express.NextFunction) => {n      spectreLogger.failure('web', 'request_error', error.message, undefined, req.path,n        'Request error occurred', 'error_handled', { method: req.method, path: req.path, error: error.message });nn      res.status(error.status || 500).json({n        error: 'Internal Server Error',n        message: config.getValue('debugMode') ? error.message : 'Something went wrong',n        timestamp: new Date().toISOString(),n      });n    });n  }nn  /**n   * Setup API routesn   */n  private setupApiRoutes(): express.Router {n    const router = express.Router();nn    // Projects endpointsn    router.get('/projects', (_req, res) => {n      try {n        const projects = orchestrator.getAllProjects();n        res.json({n          success: true,n          data: projects,n          count: projects.length,n        });n      } catch (error) {n        res.status(500).json({n          success: false,n          error: error instanceof Error ? error.message : 'Unknown error',n        });n      }n    });nn    router.post('/projects', (req, res) => {n      try {n        const { name, type, description } = req.body;n        n        if (!name || !type) {n          return res.status(400).json({n            success: false,n            error: 'Name and type are required',n          });n        }nn        return orchestrator.createProject(name, type, description)n          .then(project => {n            return res.status(201).json({n              success: true,n              data: project,n            });n          })n          .catch(error => {n            return res.status(500).json({n              success: false,n              error: error instanceof Error ? error.message : 'Unknown error',n            });n          });n      } catch (error) {n        return res.status(500).json({n          success: false,n          error: error instanceof Error ? error.message : 'Unknown error',n        });n      }n    });nn    router.get('/projects/:id', (req, res) => {n      try {n        const project = orchestrator.getProject(req.params.id);n        if (!project) {n          return res.status(404).json({n            success: false,n            error: 'Project not found',n          });n        }nn        return res.json({n          success: true,n          data: project,n        });n      } catch (error) {n        return res.status(500).json({n          success: false,n          error: error instanceof Error ? error.message : 'Unknown error',n        });n      }n    });nn    router.post('/projects/:id/start', (req, res) => {n      try {n        orchestrator.startProject(req.params.id)n          .then(() => {n            res.json({n              success: true,n              message: 'Project started successfully',n            });n          })n          .catch(error => {n            res.status(500).json({n              success: false,n              error: error instanceof Error ? error.message : 'Unknown error',n            });n          });n      } catch (error) {n        res.status(500).json({n          success: false,n          error: error instanceof Error ? error.message : 'Unknown error',n        });n      }n    });nn    router.post('/projects/:id/stop', (req, res) => {n      try {n        orchestrator.stopProject(req.params.id)n          .then(() => {n            res.json({n              success: true,n              message: 'Project stopped successfully',n            });n          })n          .catch(error => {n            res.status(500).json({n              success: false,n              error: error instanceof Error ? error.message : 'Unknown error',n            });n          });n      } catch (error) {n        res.status(500).json({n          success: false,n          error: error instanceof Error ? error.message : 'Unknown error',n        });n      }n    });nn    router.post('/projects/:id/plan', (req, res) => {n      try {n        orchestrator.generateExecutionPlan(req.params.id)n          .then(plan => {n            res.json({n              success: true,n              data: plan,n            });n          })n          .catch(error => {n            res.status(500).json({n              success: false,n              error: error instanceof Error ? error.message : 'Unknown error',n            });n          });n      } catch (error) {n        res.status(500).json({n          success: false,n          error: error instanceof Error ? error.message : 'Unknown error',n        });n      }n    });nn    router.post('/projects/:id/execute', (req, res) => {n      try {n        orchestrator.executeProjectPlan(req.params.id)n          .then(() => {n            res.json({n              success: true,n              message: 'Project execution started',n            });n          })n          .catch(error => {n            res.status(500).json({n              success: false,n              error: error instanceof Error ? error.message : 'Unknown error',n            });n          });n      } catch (error) {n        res.status(500).json({n          success: false,n          error: error instanceof Error ? error.message : 'Unknown error',n        });n      }n    });nn    router.get('/projects/:id/logs', (req, res) => {n      try {n        const limit = parseInt((req.query as any)['limit'] as string) || 50;n        const logs = orchestrator.getProjectLogs(req.params.id, limit);n        n        res.json({n          success: true,n          data: logs,n          count: logs.length,n        });n      } catch (error) {n        res.status(500).json({n          success: false,n          error: error instanceof Error ? error.message : 'Unknown error',n        });n      }n    });nn    // System endpointsn    router.get('/system/health', (_req, res) => {n      try {n        const health = orchestrator.getSystemHealth();n        res.json({n          success: true,n          data: health,n        });n      } catch (error) {n        res.status(500).json({n          success: false,n          error: error instanceof Error ? error.message : 'Unknown error',n        });n      }n    });nn    router.get('/system/agents', (_req, res) => {n      try {n        const agents = orchestrator.getAllAgents();n        res.json({n          success: true,n          data: agents,n          count: agents.length,n        });n      } catch (error) {n        res.status(500).json({n          success: false,n          error: error instanceof Error ? error.message : 'Unknown error',n        });n      }n    });nn    return router;n  }nn  /**n   * Setup web interface routesn   */n  private setupWebRoutes() {n    const chatRoutes = require('./web/routes/chat').default;n    const logsRoutes = require('./web/routes/logs').default;n    const dashboardRoutes = require('./web/routes/dashboard').default;nn    return {n      chat: chatRoutes,n      logs: logsRoutes,n      dashboard: dashboardRoutesn    };n  }nn  /**n   * Start the servern   */n  public async start(): Promise<void> {n    const port = config.getValue('port');nn    try {n      this.server = this.app.listen(port, () => {n        spectreLogger.success('web', 'server_started', undefined, undefined,n          `Spectre AI Assistant server started on port ${port}`, 'ready_for_requests',n          { port, environment: config.getValue('nodeEnv') });n      });nn      // Graceful shutdownn      process.on('SIGTERM', () => this.shutdown());n      process.on('SIGINT', () => this.shutdown());nn    } catch (error) {n      spectreLogger.failure('web', 'server_start_failed', n        error instanceof Error ? error.message : String(error));n      process.exit(1);n    }n  }nn  /**n   * Shutdown the servern   */n  public async shutdown(): Promise<void> {n    spectreLogger.success('web', 'shutdown_started', undefined, undefined,n      'Shutting down Spectre AI Assistant server', 'cleanup_in_progress');nn    try {n      // Shutdown orchestratorn      await orchestrator.shutdown();nn      // Close servern      if (this.server) {n        this.server.close(() => {n          spectreLogger.success('web', 'shutdown_completed', undefined, undefined,n            'Spectre AI Assistant server shutdown completed');n          process.exit(0);n        });n      } else {n        process.exit(0);n      }n    } catch (error) {n      spectreLogger.failure('web', 'shutdown_error', n        error instanceof Error ? error.message : String(error));n      process.exit(1);n    }n  }n}nn/**n * Start the applicationn */nasync function main(): Promise<void> {n  try {n    // Initialize configurationn    config.validate();n    n    // Register all agents with the orchestratorn    spectreLogger.success('main', 'registering_agents', undefined, undefined,n      'Registering agents with orchestrator');n    n    orchestrator.registerAgent(agents.questioner);n    orchestrator.registerAgent(agents.planner);n    orchestrator.registerAgent(agents.executor);n    orchestrator.registerAgent(agents.reviewer);n    orchestrator.registerAgent(agents.validator);n    n    spectreLogger.success('main', 'agents_registered', undefined, undefined,n      'All agents registered successfully', 'system_ready');n    n    // Create and start the applicationn    const app = new SpectreApp();n    await app.start();nn  } catch (error) {n    console.error('Failed to start Spectre AI Assistant:', error);n    process.exit(1);n  }n}nn// Start the application if this file is run directlynif (require.main === module) {n  main();n}nnexport default SpectreApp;