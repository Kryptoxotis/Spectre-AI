/**n * Spectre AI Assistant - Configuration Managementn * Handles loading and validation of environment variablesn */nnimport * as dotenv from 'dotenv';nimport { z } from 'zod';nimport { SpectreConfig, ValidationError } from '../utils/types';nn// Load environment variablesndotenv.config();nn// Configuration validation schema const ConfigSchema = z.object({n  // Core Configurationn  NODE_ENV: z.enum(['development', 'production', 'test']).default('development'),n  PORT: z.string().transform(Number).pipe(z.number().min(1).max(65535)).default('3000'),n  LOG_LEVEL: z.enum(['error', 'warn', 'info', 'debug']).default('info'),n  n  // AI API Keysn  CLAUDE_API_KEY: z.string().min(1, 'Claude API key is required'),n  OPENAI_API_KEY: z.string().optional(),n  n  // GitHub Integrationn  GITHUB_TOKEN: z.string().min(1, 'GitHub token is required'),n  GITHUB_USERNAME: z.string().min(1, 'GitHub username is required'),n  n  // Notion Integrationn  NOTION_API_KEY: z.string().min(1, 'Notion API key is required'),n  NOTION_DATABASE_ID: z.string().min(1, 'Notion database ID is required'),n  n  // Supabase Integration (Optional)n  SUPABASE_URL: z.string().url().optional(),n  SUPABASE_ANON_KEY: z.string().optional(),n  SUPABASE_SERVICE_ROLE_KEY: z.string().optional(),n  n  // Vercel Integration (Optional)n  VERCEL_TOKEN: z.string().optional(),n  VERCEL_TEAM_ID: z.string().optional(),n  n  // ChromaDB Configurationn  CHROMA_HOST: z.string().default('localhost'),n  CHROMA_PORT: z.string().transform(Number).pipe(z.number().min(1).max(65535)).default('8000'),n  CHROMA_COLLECTION_NAME: z.string().default('spectre_memory'),n  n  // Databasen  DATABASE_PATH: z.string().default('./data/spectre.db'),n  n  // Rate Limitingn  RATE_LIMIT_WINDOW_MS: z.string().transform(Number).pipe(z.number().positive()).default('900000'),n  RATE_LIMIT_MAX_REQUESTS: z.string().transform(Number).pipe(z.number().positive()).default('100'),n  n  // Securityn  SESSION_SECRET: z.string().min(32, 'Session secret must be at least 32 characters').default('your_session_secret_here_change_in_production'),n  ENCRYPTION_KEY: z.string().length(32, 'Encryption key must be exactly 32 characters').default('your_32_character_encryption_key_here'),n  n  // Loggingn  LOG_FILE_PATH: z.string().default('./logs/spectre.log'),n  LOG_MAX_SIZE: z.string().default('10m'),n  LOG_MAX_FILES: z.string().transform(Number).pipe(z.number().positive()).default('5'),n  n  // Developmentn  DEBUG_MODE: z.string().transform((val: string) => val === 'true').default('false'),n  ENABLE_METRICS: z.string().transform((val: string) => val === 'true').default('true'),n  n  // CORSn  CORS_ORIGIN: z.string().default('*'),n});nn/**n * Configuration class for Spectre AI Assistantn */nexport class Config {n  private static instance: Config;n  private config: SpectreConfig;nn  private constructor() {n    this.config = this.loadConfig();n  }nn  /**n   * Get singleton instance of Confign   */n  public static getInstance(): Config {n    if (!Config.instance) {n      Config.instance = new Config();n    }n    return Config.instance;n  }nn  /**n   * Load and validate configuration from environment variablesn   */n  private loadConfig(): SpectreConfig {n    try {n      const rawConfig = ConfigSchema.parse(process.env);n      n      return {n        // Core Configurationn        nodeEnv: rawConfig.NODE_ENV,n        port: rawConfig.PORT,n        logLevel: rawConfig.LOG_LEVEL,n        n        // AI API Keysn        claudeApiKey: rawConfig.CLAUDE_API_KEY,n        openaiApiKey: rawConfig.OPENAI_API_KEY,n        n        // GitHub Integrationn        githubToken: rawConfig.GITHUB_TOKEN,n        githubUsername: rawConfig.GITHUB_USERNAME,n        n        // Notion Integrationn        notionApiKey: rawConfig.NOTION_API_KEY,n        notionDatabaseId: rawConfig.NOTION_DATABASE_ID,n        n        // Supabase Integration (Optional)n        supabaseUrl: rawConfig.SUPABASE_URL,n        supabaseAnonKey: rawConfig.SUPABASE_ANON_KEY,n        supabaseServiceRoleKey: rawConfig.SUPABASE_SERVICE_ROLE_KEY,n        n        // Vercel Integration (Optional)n        vercelToken: rawConfig.VERCEL_TOKEN,n        vercelTeamId: rawConfig.VERCEL_TEAM_ID,n        n        // ChromaDB Configurationn        chromaHost: rawConfig.CHROMA_HOST,n        chromaPort: rawConfig.CHROMA_PORT,n        chromaCollectionName: rawConfig.CHROMA_COLLECTION_NAME,n        n        // Databasen        databasePath: rawConfig.DATABASE_PATH,n        n        // Rate Limitingn        rateLimitWindowMs: rawConfig.RATE_LIMIT_WINDOW_MS,n        rateLimitMaxRequests: rawConfig.RATE_LIMIT_MAX_REQUESTS,n        n        // Securityn        sessionSecret: rawConfig.SESSION_SECRET,n        encryptionKey: rawConfig.ENCRYPTION_KEY,n        n        // Loggingn        logFilePath: rawConfig.LOG_FILE_PATH,n        logMaxSize: rawConfig.LOG_MAX_SIZE,n        logMaxFiles: rawConfig.LOG_MAX_FILES,n        n        // Developmentn        debugMode: rawConfig.DEBUG_MODE,n        enableMetrics: rawConfig.ENABLE_METRICS,n        n        // CORSn        corsOrigin: rawConfig.CORS_ORIGIN,n      };n    } catch (error) {n      if (error instanceof z.ZodError) {n        const errors = error.errors.map((err: any) => `${err.path.join('.')}: ${err.message}`).join(', ');n        throw new ValidationError(`Configuration validation failed: ${errors}`, 'config', process.env);n      }n      throw new ValidationError(`Failed to load configuration: ${error}`, 'config');n    }n  }nn  /**n   * Get the complete configuration objectn   */n  public get(): SpectreConfig {n    return { ...this.config };n  }nn  /**n   * Get a specific configuration valuen   */n  public getValue<K extends keyof SpectreConfig>(key: K): SpectreConfig[K] {n    return this.config[key];n  }nn  /**n   * Check if a specific integration is configuredn   */n  public isIntegrationEnabled(integration: string): boolean {n    switch (integration) {n      case 'github':n        return !!this.config.githubToken && !!this.config.githubUsername;n      case 'notion':n        return !!this.config.notionApiKey && !!this.config.notionDatabaseId;n      case 'supabase':n        return !!(this.config.supabaseUrl && this.config.supabaseAnonKey);n      case 'vercel':n        return !!this.config.vercelToken;n      default:n        return false;n    }n  }nn  /**n   * Get configuration for a specific integrationn   */n  public getIntegrationConfig(integration: string): Record<string, any> {n    switch (integration) {n      case 'github':n        return {n          token: this.config.githubToken,n          username: this.config.githubUsername,n        };n      case 'notion':n        return {n          apiKey: this.config.notionApiKey,n          databaseId: this.config.notionDatabaseId,n        };n      case 'supabase':n        return {n          url: this.config.supabaseUrl,n          anonKey: this.config.supabaseAnonKey,n          serviceRoleKey: this.config.supabaseServiceRoleKey,n        };n      case 'vercel':n        return {n          token: this.config.vercelToken,n          teamId: this.config.vercelTeamId,n        };n      case 'chromadb':n        return {n          host: this.config.chromaHost,n          port: this.config.chromaPort,n          collectionName: this.config.chromaCollectionName,n        };n      default:n        throw new ValidationError(`Unknown integration: ${integration}`, 'integration');n    }n  }nn  /**n   * Validate that all required configurations are presentn   */n  public validate(): void {n    const requiredIntegrations = ['github', 'notion'];n    const missingIntegrations = requiredIntegrations.filter(n      integration => !this.isIntegrationEnabled(integration)n    );nn    if (missingIntegrations.length > 0) {n      throw new ValidationError(n        `Missing required integration configurations: ${missingIntegrations.join(', ')}`,n        'integrations'n      );n    }n  }nn  /**n   * Get configuration summary for logging (without sensitive data)n   */n  public getSummary(): Record<string, any> {n    return {n      nodeEnv: this.config.nodeEnv,n      port: this.config.port,n      logLevel: this.config.logLevel,n      debugMode: this.config.debugMode,n      enableMetrics: this.config.enableMetrics,n      integrations: {n        github: this.isIntegrationEnabled('github'),n        notion: this.isIntegrationEnabled('notion'),n        supabase: this.isIntegrationEnabled('supabase'),n        vercel: this.isIntegrationEnabled('vercel'),n      },n      chromaHost: this.config.chromaHost,n      chromaPort: this.config.chromaPort,n      databasePath: this.config.databasePath,n    };n  }nn  /**n   * Reload configuration from environment variablesn   */n  public reload(): void {n    this.config = this.loadConfig();n  }n}nn// Export singleton instancenexport const config = Config.getInstance();nn// Export default configuration for backward compatibilitynexport default config;