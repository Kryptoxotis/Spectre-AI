/**n * Spectre AI Assistant - Type Definitionsn * Core type definitions for the entire systemn */nn// ============================================================================n// CORE SYSTEM TYPESn// ============================================================================nnexport interface SpectreConfig {n  // Core Configurationn  nodeEnv: 'development' | 'production' | 'test';n  port: number;n  logLevel: 'error' | 'warn' | 'info' | 'debug';n  n  // AI API Keysn  claudeApiKey: string;n  openaiApiKey: string | undefined;n  n  // GitHub Integrationn  githubToken: string;n  githubUsername: string;n  n  // Notion Integrationn  notionApiKey: string;n  notionDatabaseId: string;n  n  // Supabase Integration (Optional)n  supabaseUrl: string | undefined;n  supabaseAnonKey: string | undefined;n  supabaseServiceRoleKey: string | undefined;n  n  // Vercel Integration (Optional)n  vercelToken: string | undefined;n  vercelTeamId: string | undefined;n  n  // ChromaDB Configurationn  chromaHost: string;n  chromaPort: number;n  chromaCollectionName: string;n  n  // Databasen  databasePath: string;n  n  // Rate Limitingn  rateLimitWindowMs: number;n  rateLimitMaxRequests: number;n  n  // Securityn  sessionSecret: string;n  encryptionKey: string;n  n  // Loggingn  logFilePath: string;n  logMaxSize: string;n  logMaxFiles: number;n  n  // Developmentn  debugMode: boolean;n  enableMetrics: boolean;n  n  // CORSn  corsOrigin: string;n}nn// ============================================================================n// PROJECT TYPESn// ============================================================================nnexport type ProjectType = 'website' | 'automation';nnexport interface Project {n  id: string;n  name: string;n  type: ProjectType;n  status: ProjectStatus;n  createdAt: Date;n  updatedAt: Date;n  metadata: ProjectMetadata;n  answers: QuestionAnswer[];n  plan?: ExecutionPlan;n  executionLog: ExecutionLog[];n}nnexport type ProjectStatus = n  | 'questioning'n  | 'planning'n  | 'executing'n  | 'reviewing'n  | 'validating'n  | 'completed'n  | 'failed'n  | 'paused';nnexport interface ProjectMetadata {n  description: string | undefined;n  targetUrl: string | undefined;n  repositoryUrl: string | undefined;n  deploymentUrl: string | undefined;n  technologies: string[] | undefined;n  estimatedDuration: number | undefined;n  complexity: 'simple' | 'medium' | 'complex' | undefined;n}nn// ============================================================================n// QUESTIONING SYSTEMn// ============================================================================nnexport interface Question {n  id: string;n  text: string;n  type: QuestionType;n  required: boolean;n  options?: string[];n  validation?: QuestionValidation;n  context?: string;n  order: number;n}nnexport type QuestionType = n  | 'text'n  | 'select'n  | 'multiselect'n  | 'boolean'n  | 'number'n  | 'url'n  | 'email';nnexport interface QuestionValidation {n  minLength?: number;n  maxLength?: number;n  pattern?: string;n  required?: boolean;n}nnexport interface QuestionAnswer {n  questionId: string;n  answer: string | string[] | boolean | number;n  timestamp: Date;n  confidence: number | undefined;n}nn// ============================================================================n// PLANNING SYSTEMn// ============================================================================nnexport interface ExecutionPlan {n  id: string;n  projectId: string;n  steps: ExecutionStep[];n  estimatedDuration: number;n  complexity: 'simple' | 'medium' | 'complex';n  dependencies: string[];n  riskLevel: 'low' | 'medium' | 'high';n  createdAt: Date;n  status: 'draft' | 'approved' | 'executing' | 'completed' | 'failed';n}nnexport interface ExecutionStep {n  id: string;n  order: number;n  title: string;n  description: string;n  type: StepType;n  agent: AgentType;n  status: StepStatus;n  estimatedDuration: number;n  actualDuration?: number;n  dependencies: string[];n  metadata: Record<string, any>;n  error?: string;n  retryCount: number;n  maxRetries: number;n}nnexport type StepType = n  | 'question'n  | 'plan'n  | 'code_generation'n  | 'repository_creation'n  | 'cms_setup'n  | 'deployment'n  | 'validation'n  | 'review';nnexport type StepStatus = n  | 'pending'n  | 'in_progress'n  | 'completed'n  | 'failed'n  | 'skipped'n  | 'retrying';nn// ============================================================================n// AGENT SYSTEMn// ============================================================================nnexport type AgentType = n  | 'questioner'n  | 'planner'n  | 'executor'n  | 'reviewer'n  | 'validator'n  | 'logger'n  | 'orchestrator'n  | 'learning'n  | 'web';nnexport interface IAgent {n  type: AgentType;n  name: string;n  description: string;n  capabilities: string[];n  isActive: boolean;n  version: string;n  n  execute(context: AgentContext): Promise<AgentResult>;n  canHandle(step: any): boolean;n}nnexport interface Agent {n  type: AgentType;n  name: string;n  description: string;n  capabilities: string[];n  isActive: boolean;n  version: string;n}nnexport interface AgentContext {n  projectId: string;n  project: Project;n  plan: ExecutionPlan | undefined;n  currentStep: ExecutionStep | undefined;n  memory: MemoryContext;n  config: SpectreConfig;n}nnexport interface AgentResult {n  success: boolean;n  data?: any;n  error?: string;n  metadata?: Record<string, any>;n  nextStep?: string;n  requiresApproval?: boolean;n}nn// ============================================================================n// MEMORY & LEARNING SYSTEMn// ============================================================================nnexport interface MemoryContext {n  projectHistory: Project[];n  questionPatterns: QuestionPattern[];n  executionPatterns: ExecutionPattern[];n  failurePatterns: FailurePattern[];n  successPatterns: SuccessPattern[];n}nnexport interface QuestionPattern {n  id: string;n  projectType: ProjectType;n  questionText: string;n  effectiveness: number;n  usageCount: number;n  lastUsed: Date;n  context: string[];n}nnexport interface QuestionTemplate {n  id: string;n  name: string;n  description: string;n  questions: string[];n  order: string[];n}nnexport interface ExecutionPattern {n  id: string;n  stepType: StepType;n  successRate: number;n  averageDuration: number;n  commonErrors: string[];n  bestPractices: string[];n  usageCount: number;n}nnexport interface FailurePattern {n  id: string;n  stepType: StepType;n  errorMessage: string;n  frequency: number;n  resolution: string;n  lastOccurrence: Date;n}nnexport interface SuccessPattern {n  id: string;n  stepType: StepType;n  successFactors: string[];n  averageDuration: number;n  frequency: number;n  lastOccurrence: Date;n}nn// ============================================================================n// LOGGING SYSTEMn// ============================================================================nnexport interface ExecutionLog {n  id: string;n  timestamp: Date;n  agent: AgentType;n  action: string;n  projectType: ProjectType | undefined;n  projectId: string | undefined;n  status: 'success' | 'failure' | 'pending' | 'retrying';n  notes: string | undefined;n  nextStep: string | undefined;n  metadata: Record<string, any> | undefined;n  error: string | undefined;n  duration: number | undefined;n  retryCount: number | undefined;n}nnexport interface LogEntry {n  timestamp: Date;n  level: 'error' | 'warn' | 'info' | 'debug';n  message: string;n  agent?: AgentType;n  projectId?: string;n  metadata?: Record<string, any>;n  error?: Error;n}nn// ============================================================================n// INTEGRATION TYPESn// ============================================================================nnexport interface MCPClient {n  name: string;n  isConnected: boolean;n  lastHeartbeat: Date;n  capabilities: string[];n  errorCount: number;n  maxRetries: number;n}nnexport interface GitHubRepository {n  id: string;n  name: string;n  fullName: string;n  description?: string;n  url: string;n  private: boolean;n  createdAt: Date;n  updatedAt: Date;n}nnexport interface NotionDatabase {n  id: string;n  title: string;n  description?: string;n  url: string;n  properties: Record<string, any>;n  createdAt: Date;n  updatedAt: Date;n}nnexport interface SupabaseTable {n  name: string;n  schema: string;n  columns: SupabaseColumn[];n  indexes: SupabaseIndex[];n  constraints: SupabaseConstraint[];n}nnexport interface SupabaseColumn {n  name: string;n  type: string;n  nullable: boolean;n  defaultValue?: any;n  isPrimary: boolean;n  isUnique: boolean;n}nnexport interface SupabaseIndex {n  name: string;n  columns: string[];n  type: 'btree' | 'hash' | 'gin' | 'gist';n}nnexport interface SupabaseConstraint {n  name: string;n  type: 'primary_key' | 'foreign_key' | 'unique' | 'check';n  definition: string;n}nnexport interface Deployment {n  id: string;n  projectId: string;n  platform: 'vercel' | 'netlify' | 'github_pages';n  url?: string;n  status: DeploymentStatus;n  createdAt: Date;n  completedAt?: Date;n  logs: string[];n  metadata: Record<string, any>;n}nnexport type DeploymentStatus = n  | 'pending'n  | 'building'n  | 'deploying'n  | 'success'n  | 'failed'n  | 'cancelled';nn// ============================================================================n// WEB INTERFACE TYPESn// ============================================================================nnexport interface ChatMessage {n  id: string;n  timestamp: Date;n  sender: 'user' | 'spectre';n  content: string;n  type: 'text' | 'question' | 'plan' | 'status' | 'error';n  metadata?: Record<string, any>;n}nnexport interface DashboardStats {n  totalProjects: number;n  activeProjects: number;n  completedProjects: number;n  failedProjects: number;n  averageExecutionTime: number;n  successRate: number;n  recentActivity: ExecutionLog[];n}nn// ============================================================================n// UTILITY TYPESn// ============================================================================nnexport interface RateLimitInfo {n  remaining: number;n  reset: Date;n  limit: number;n  used: number;n}nnexport interface RetryConfig {n  maxRetries: number;n  backoffMs: number;n  backoffMultiplier: number;n  maxBackoffMs: number;n}nnexport interface ValidationResult {n  isValid: boolean;n  errors: string[];n  warnings: string[];n}nn// ============================================================================n// ERROR TYPESn// ============================================================================nnexport class SpectreError extends Error {n  constructor(n    message: string,n    public code: string,n    public statusCode: number = 500,n    public metadata?: Record<string, any>n  ) {n    super(message);n    this.name = 'SpectreError';n  }n}nnexport class AgentError extends SpectreError {n  constructor(n    message: string,n    public agent: AgentType,n    public context?: Record<string, any>n  ) {n    super(message, 'AGENT_ERROR', 500, context);n    this.name = 'AgentError';n  }n}nnexport class IntegrationError extends SpectreError {n  constructor(n    message: string,n    public integration: string,n    public context?: Record<string, any>n  ) {n    super(message, 'INTEGRATION_ERROR', 500, context);n    this.name = 'IntegrationError';n  }n}nnexport class ValidationError extends SpectreError {n  constructor(n    message: string,n    public field: string,n    public value?: anyn  ) {n    super(message, 'VALIDATION_ERROR', 400, { field, value });n    this.name = 'ValidationError';n  }n}